file://cities15000.zip <- http://download.geonames.org/export/dump/cities15000.zip ! download


file://cities15000.txt <- file://cities15000.zip
    unzip cities15000.zip


sqlite://world-cities.sqlite/city <- file://cities15000.txt ! python
    import sqlite3
    import csv
    INFILE = 'cities15000.txt'
    DBFILE = 'world-cities.sqlite'

    with open(INFILE) as incsv:
        reader = csv.reader(incsv, delimiter="\t")
        conn = sqlite3.connect(DBFILE)
        c = conn.cursor()
        c.execute('''CREATE TABLE city
                 (name, country_code, subcountry_code, geonameid, latitude double precision, longitude double precision, alternatenames, population int, elevation int)''')
        for geonameid, name, asciiname, alternatenames, latitude, longitude, \
          featureclass, featurecode, countrycode, cc2, admin1code, admin2code, \
          admin3code, admin4code, population, elevation, dem, timezone, \
          modificationdate in reader:
            name = name.decode('utf8')
            country_code = countrycode.decode('utf8')
            subcountry_code = admin1code.decode('utf8')
            geonameid = geonameid.decode('utf8')
            latitude = float(latitude.decode('utf8'))
            longitude = float(longitude.decode('utf8'))
            alternatenames = alternatenames.decode('utf8')
            alternatenames = alternatenames if alternatenames != '' else None
            elevation_raw = elevation.decode('utf8')
            elevation = int(elevation_raw) if elevation_raw != '' else None
            c.execute("INSERT INTO city VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", (name, country_code, subcountry_code, geonameid, latitude, longitude, alternatenames, population, elevation))
        conn.commit()
        conn.close()


file://admin1CodesASCII.txt <- http://download.geonames.org/export/dump/admin1CodesASCII.txt ! download


sqlite://world-cities.sqlite/admin1 <- file://admin1CodesASCII.txt ! python
    import sqlite3
    import csv
    INFILE = 'admin1CodesASCII.txt'
    DBFILE = 'world-cities.sqlite'

    with open(INFILE) as incsv:
        reader = csv.reader(incsv, delimiter="\t")
        conn = sqlite3.connect(DBFILE)
        c = conn.cursor()
        c.execute('''CREATE TABLE admin1
                 (country_code, subcountry_code, name, geonameid)''')
        for code, name, asciiname, geonameid in reader:
            code = code.decode('utf8')
            country_code, subcountry_code = code.split(u'.', 2)
            name = name.decode('utf8')
            geonameid = geonameid.decode('utf8')
            c.execute("INSERT INTO admin1 VALUES (?, ?, ?, ?)", (country_code, subcountry_code, name, geonameid))
        conn.commit()
        conn.close()


file://countryInfo.txt <- http://download.geonames.org/export/dump/countryInfo.txt ! download


sqlite://world-cities.sqlite/country <- file://countryInfo.txt ! python
    import sqlite3
    import csv
    INFILE = 'countryInfo.txt'
    DBFILE = 'world-cities.sqlite'

    def skip_comment(instream):
        for line in instream:
            if line[0] != "#":
                yield line

    with open(INFILE) as incsv:
        reader = csv.reader(skip_comment(incsv), delimiter="\t")
        conn = sqlite3.connect(DBFILE)
        c = conn.cursor()
        c.execute('''CREATE TABLE country
                 (country_code, name, geonameid)''')
        for ISO, ISO3, ISONumeric, fips, Country, Capital, Area, \
          Population, Continent, tld, CurrencyCode, CurrencyName, \
          Phone, PostalCodeFormat, PostalCodeRegex, Languages, \
          geonameid, neighbours, EquivalentFipsCode in reader:
            country_code = ISO.decode('utf8')
            name = Country.decode('utf8')
            geonameid = geonameid.decode('utf8')
            c.execute("INSERT INTO country VALUES (?, ?, ?)", (country_code, name, geonameid))
        conn.commit()
        conn.close()

sqlite://world-cities.sqlite/cities <- sqlite://world-cities.sqlite/country, sqlite://world-cities.sqlite/admin1, sqlite://world-cities.sqlite/city ! python
    import sqlite3
    DBFILE = 'world-cities.sqlite'

    conn = sqlite3.connect(DBFILE)
    c = conn.cursor()
    c.execute('''
      CREATE TABLE cities
        (
          name,
          country_code,
          country_name,
          subcountry_code,
          subcountry_name,
          geoname_id,
          latitude double,
          longitude double,
          alternate_names,
          population int,
          elevation int,
          CONSTRAINT geoname_id UNIQUE (geoname_id)
        )''')

    sql = '''
        INSERT INTO cities (
          name,
          country_code,
          country_name,
          subcountry_code,
          subcountry_name,
          geoname_id,
          latitude,
          longitude,
          alternate_names,
          population,
          elevation
        )
        SELECT
          city.name as name,
          city.country_code as country_code,
          country.name as country_name,
          city.subcountry_code as subcountry,
          IFNULL(admin1.name, "N/A") as subcountry_code,
          city.geonameid as geoname_id,
          city.latitude as latitude,
          city.longitude as longitude,
          city.alternatenames as alternate_names,
          city.population as population,
          city.elevation as elevation
       FROM city
          LEFT OUTER JOIN country ON city.country_code = country.country_code
          LEFT OUTER JOIN admin1 ON city.subcountry_code = admin1.subcountry_code AND city.country_code = admin1.country_code
             '''
    c.execute(sql)

    conn.commit()
    conn.close()

file://../data/cities.sql <- sqlite://world-cities.sqlite/cities ! python
    import sqlite3
    import codecs
    OUTFILE = '../data/cities.sql'
    DBFILE = 'world-cities.sqlite'

    # Mimic the sqlite3 console shell's .dump command
    # Author: Paul Kippes <kippesp@gmail.com>
    def _iterdump(connection, table_name):
        """
        Returns an iterator to the dump of the database in an SQL text format.

        Used to produce an SQL dump of the database.  Useful to save an in-memory
        database for later restoration.  This function should not be called
        directly but instead called from the Connection method, iterdump().
        """

        cu = connection.cursor()
        table_name = table_name

        yield('BEGIN TRANSACTION;')

        # sqlite_master table contains the SQL CREATE statements for the database.
        q = """
           SELECT name, type, sql
            FROM sqlite_master
                WHERE sql NOT NULL AND
                type == 'table' AND
                name == :table_name
            """
        schema_res = cu.execute(q, {'table_name': table_name})
        for table_name, type, sql in schema_res.fetchall():
            if table_name == 'sqlite_sequence':
                yield('DELETE FROM sqlite_sequence;')
            elif table_name == 'sqlite_stat1':
                yield('ANALYZE sqlite_master;')
            elif table_name.startswith('sqlite_'):
                continue
            else:
                yield('%s;' % sql)

            # Build the insert statement for each row of the current table
            res = cu.execute("PRAGMA table_info('%s')" % table_name)
            column_names = [str(table_info[1]) for table_info in res.fetchall()]
            q = "SELECT 'INSERT INTO \"%(tbl_name)s\" VALUES("
            q += ",".join(["'||quote(" + col + ")||'" for col in column_names])
            q += ")' FROM '%(tbl_name)s'"
            query_res = cu.execute(q % {'tbl_name': table_name})
            for row in query_res:
                yield("%s;" % row[0])

        # Now when the type is 'index', 'trigger', or 'view'
        #q = """
        #    SELECT name, type, sql
        #    FROM sqlite_master
        #        WHERE sql NOT NULL AND
        #        type IN ('index', 'trigger', 'view')
        #    """
        #schema_res = cu.execute(q)
        #for name, type, sql in schema_res.fetchall():
        #    yield('%s;' % sql)

        yield('COMMIT;')

    conn = sqlite3.connect(DBFILE)
    with codecs.open(OUTFILE, 'w', encoding="utf-8") as f:
        for line in _iterdump(conn, 'cities'):
            f.write('%s\n' % line)
    conn.close()
